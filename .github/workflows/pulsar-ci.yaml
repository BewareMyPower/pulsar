#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Pulsar CI
on:
  pull_request:
    branches:
      - master
      - branch-*
      - pulsar-*
  schedule:
    # scheduled job with JDK 21
    - cron: '0 12 * * *'
    # scheduled job with JDK 17
    # if cron expression is changed, make sure to update the expression in jdk_major_version step in preconditions job
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      collect_coverage:
        description: 'Collect test coverage and upload to Codecov'
        required: true
        type: boolean
        default: true
      jdk_major_version:
        description: 'JDK major version to use for the build'
        required: true
        type: choice
        options:
          - '17'
          - '21'
          - '24'
          - '25'
        default: '21'
      trace_test_resource_cleanup:
        description: 'Collect thread & heap information before exiting a test JVM. When set to "on", thread dump and heap histogram will be collected. When set to "full", a heap dump will also be collected.'
        required: true
        type: choice
        options:
          - 'off'
          - 'on'
          - 'full'
        default: 'off'
      thread_leak_detector_wait_millis:
        description: 'Duration in ms to wait for threads to exit in thread leak detection between test classes. It is necessary to wait for threads to complete before they are determined to be leaked threads.'
        required: true
        type: number
        default: 10000
      netty_leak_detection:
        description: 'Controls Netty leak detection. When set to "report", Netty leak detection is enabled. When set to "fail_on_leak", Netty leak detection is enabled and a build job will fail if leaks are detected. When set to "off", Netty leak detection is disabled.'
        required: true
        type: choice
        options:
          - 'report'
          - 'fail_on_leak'
          - 'off'
        default: 'report'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}${{ github.event_name == 'workflow_dispatch' && github.event.inputs.jdk_major_version || '' }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Xss1500k -Xmx2048m -XX:+UnlockDiagnosticVMOptions -XX:GCLockerRetryAllocationCount=100 -Daether.connector.http.reuseConnections=false -Daether.connector.requestTimeout=60000 -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.http.retryHandler.requestSentEnabled=true -Dmaven.wagon.http.serviceUnavailableRetryStrategy.class=standard -Dmaven.wagon.rto=60000
  # defines the retention period for the intermediate build artifacts needed for rerunning a failed build job
  # it's possible to rerun individual failed jobs when the build artifacts are available
  # if the artifacts have already been expired, the complete workflow can be rerun by closing and reopening the PR or by rebasing the PR
  ARTIFACT_RETENTION_DAYS: 3
  JDK_DISTRIBUTION: corretto

jobs:
  preconditions:
    name: Preconditions
    runs-on: ubuntu-22.04
    outputs:
      docs_only: ${{ steps.check_changes.outputs.docs_only }}
      changed_tests: ${{ steps.changes.outputs.tests_files }}
      need_owasp: ${{ steps.changes.outputs.need_owasp }}
      collect_coverage: ${{ steps.check_coverage.outputs.collect_coverage }}
      jdk_major_version: ${{ steps.jdk_major_version.outputs.jdk_major_version }}
      java_non_tests: ${{ steps.changes.outputs.java_non_tests }}
      netty_leak_detection: ${{ steps.netty_leak_detection.outputs.netty_leak_detection }}
    steps:
      - name: Cancel scheduled jobs in forks by default
        if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'schedule' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.cancelWorkflowRun({owner: context.repo.owner, repo: context.repo.repo, run_id: context.runId});
            process.exit(1);

      - name: Select JDK major version
        id: jdk_major_version
        run: |
          # use JDK 17 for the scheduled build with cron expression '0 6 * * *'
          if [[ "${{ github.event_name == 'schedule' && github.event.schedule == '0 6 * * *' && 'true' || 'false' }}" == "true" ]]; then
            echo "jdk_major_version=17" >> $GITHUB_OUTPUT
            exit 0
          fi
          # use JDK 21 for build unless overridden with workflow_dispatch input
          echo "jdk_major_version=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.jdk_major_version || '21'}}" >> $GITHUB_OUTPUT

      - name: checkout
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4

      - name: Detect changed files
        if: ${{ github.event_name == 'pull_request' }}
        id:   changes
        uses: apache/pulsar-test-infra/paths-filter@master
        with:
          filters: .github/changes-filter.yaml
          list-files: csv

      - name: Check changed files
        if: ${{ github.event_name == 'pull_request' }}
        id: check_changes
        run: |
          if [[ "${GITHUB_EVENT_NAME}" != "schedule" && "${GITHUB_EVENT_NAME}" != "workflow_dispatch" ]]; then
            echo "docs_only=${{ fromJSON(steps.changes.outputs.all_count) == fromJSON(steps.changes.outputs.docs_count) && fromJSON(steps.changes.outputs.docs_count) > 0 }}" >> $GITHUB_OUTPUT
          else
            echo docs_only=false >> $GITHUB_OUTPUT
          fi

      - name: Check if coverage should be collected
        id: check_coverage
        run: |
          echo "collect_coverage=${{ 
          (steps.check_changes.outputs.docs_only != 'true' && github.event_name != 'workflow_dispatch' 
            && (github.base_ref == 'master' || github.ref_name == 'master')) 
          || (github.event_name == 'workflow_dispatch' && github.event.inputs.collect_coverage == 'true')
          }}"  >> $GITHUB_OUTPUT

      - name: Set Netty leak detection mode
        id: netty_leak_detection
        run: |
          echo "netty_leak_detection=${{ 
          github.event_name == 'workflow_dispatch' && github.event.inputs.netty_leak_detection || 'report'
          }}" >> $GITHUB_OUTPUT

      - name: Check if the PR has been approved for testing
        if: ${{ steps.check_changes.outputs.docs_only != 'true' && github.repository == 'apache/pulsar' && github.event_name == 'pull_request' }}
        env:
          GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          build/pulsar_ci_tool.sh check_ready_to_test

  run-benchmark:
    needs: preconditions
    name: Run benchmark
    env:
      JOB_NAME: Build and License check
      DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Tune Runner VM
        uses: ./.github/actions/tune-runner-vm

      - name: Setup ssh access to build runner VM
        # ssh access is enabled for builds in own forks
        if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request' }}
        uses: ./.github/actions/ssh-access
        continue-on-error: true
        with:
          limit-access-to-actor: true

      - name: Cache local Maven repository
        uses: actions/cache@v4
        timeout-minutes: 5
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-dependencies-core-modules-

      - name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JDK_DISTRIBUTION }}
          java-version: ${{ env.CI_JDK_MAJOR_VERSION }}

      - name: Build the benchmark
        run: mvn -Pcore-modules,microbench,-main -T 1C clean package

      - name: Run the benchmark
        run: java -jar microbench/target/microbenchmarks.jar TopicNameBenchmark
